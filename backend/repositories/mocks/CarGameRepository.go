// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "toycar_backend/models"

	mock "github.com/stretchr/testify/mock"
)

// CarGameRepository is an autogenerated mock type for the CarGameRepository type
type CarGameRepository struct {
	mock.Mock
}

// GetAllGames provides a mock function with given fields:
func (_m *CarGameRepository) GetAllGames() ([]models.CarGame, error) {
	ret := _m.Called()

	var r0 []models.CarGame
	if rf, ok := ret.Get(0).(func() []models.CarGame); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CarGame)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGame provides a mock function with given fields: id
func (_m *CarGameRepository) GetGame(id uint) (*models.CarGame, error) {
	ret := _m.Called(id)

	var r0 *models.CarGame
	if rf, ok := ret.Get(0).(func(uint) *models.CarGame); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CarGame)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGame provides a mock function with given fields: g
func (_m *CarGameRepository) NewGame(g *models.CarGame) error {
	ret := _m.Called(g)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.CarGame) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGame provides a mock function with given fields: g
func (_m *CarGameRepository) UpdateGame(g *models.CarGame) error {
	ret := _m.Called(g)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.CarGame) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCarGameRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarGameRepository creates a new instance of CarGameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarGameRepository(t mockConstructorTestingTNewCarGameRepository) *CarGameRepository {
	mock := &CarGameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
